trigger: none

variables:
- group: AzureSecrets

jobs:
- job: terraformCI
  displayName: 'Terraform CI'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self

  - script: |
      export ARM_CLIENT_ID=$(servicePrincipalId)
      export ARM_CLIENT_SECRET=$(servicePrincipalKey)
      export ARM_SUBSCRIPTION_ID=$(subscriptionId)
      export ARM_TENANT_ID=$(tenantId)
      export TF_VAR_sql_administrator_login=$(sql_administrator_login)
      export TF_VAR_sql_administrator_login_password=$(sql_administrator_password)
    displayName: 'Set Environment Variables'
    
  - script: |
      export ARM_CLIENT_ID=$(servicePrincipalId)
      export ARM_CLIENT_SECRET=$(servicePrincipalKey)
      export ARM_SUBSCRIPTION_ID=$(subscriptionId)
      export ARM_TENANT_ID=$(tenantId)
      export TF_VAR_sql_administrator_login=$(sql_administrator_login)
      export TF_VAR_sql_administrator_login_password=$(sql_administrator_password)
      terraform init
    displayName: 'Terraform Init'
    
  - script: |
      terraform validate
    displayName: 'Terraform Validate'
    
  - script: |
      export ARM_CLIENT_ID=$(servicePrincipalId)
      export ARM_CLIENT_SECRET=$(servicePrincipalKey)
      export ARM_SUBSCRIPTION_ID=$(subscriptionId)
      export ARM_TENANT_ID=$(tenantId)
      export TF_VAR_sql_administrator_login=$(sql_administrator_login)
      export TF_VAR_sql_administrator_login_password=$(sql_administrator_password)
      terraform plan -out=tfplan -input=false \
        -var "tenant_id=${tenantId}" \
        -var "sql_administrator_login=${sql_administrator_login}" \
        -var "sql_administrator_login_password=${sql_administrator_password}"
    displayName: 'Terraform Plan'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    
  - script: |
      export ARM_CLIENT_ID=$(servicePrincipalId)
      export ARM_CLIENT_SECRET=$(servicePrincipalKey)
      export ARM_SUBSCRIPTION_ID=$(subscriptionId)
      export ARM_TENANT_ID=$(tenantId)
      export TF_VAR_sql_administrator_login=$(sql_administrator_login)
      export TF_VAR_sql_administrator_login_password=$(sql_administrator_password)
      terraform apply -input=false tfplan
    displayName: 'Terraform Apply'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

- job: terraformPR
  displayName: 'Terraform PR'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self

  - script: |
      export ARM_CLIENT_ID=$(servicePrincipalId)
      export ARM_CLIENT_SECRET=$(servicePrincipalKey)
      export ARM_SUBSCRIPTION_ID=$(subscriptionId)
      export ARM_TENANT_ID=$(tenantId)
      export TF_VAR_sql_administrator_login=$(sql_administrator_login)
      export TF_VAR_sql_administrator_login_password=$(sql_administrator_password)
    displayName: 'Set Environment Variables'

  - script: |
      export ARM_CLIENT_ID=$(servicePrincipalId)
      export ARM_CLIENT_SECRET=$(servicePrincipalKey)
      export ARM_SUBSCRIPTION_ID=$(subscriptionId)
      export ARM_TENANT_ID=$(tenantId)
      export TF_VAR_sql_administrator_login=$(sql_administrator_login)
      export TF_VAR_sql_administrator_login_password=$(sql_administrator_password)
      terraform init
    displayName: 'Terraform Init'
    
  - script: |
      terraform validate
    displayName: 'Terraform Validate'
    
  - script: |
      export ARM_CLIENT_ID=$(servicePrincipalId)
      export ARM_CLIENT_SECRET=$(servicePrincipalKey)
      export ARM_SUBSCRIPTION_ID=$(subscriptionId)
      export ARM_TENANT_ID=$(tenantId)
      export TF_VAR_sql_administrator_login=$(sql_administrator_login)
      export TF_VAR_sql_administrator_login_password=$(sql_administrator_password)
      terraform plan -out=tfplan -input=false \
        -var "tenant_id=${tenantId}" \
        -var "sql_administrator_login=${sql_administrator_login}" \
        -var "sql_administrator_login_password=${sql_administrator_password}"
    displayName: 'Terraform Plan'
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/main'))
